Index: src/main/java/org/easymock/EasyMock.java
===================================================================
--- src/main/java/org/easymock/EasyMock.java	(revision 271)
+++ src/main/java/org/easymock/EasyMock.java	(working copy)
@@ -627,6 +627,16 @@
     }
 
     /**
+     * Expects any String argument. For details, see the EasyMock documentation.
+     * 
+     * @return <code>null</code>.
+     */
+    public static String anyString() {
+        reportMatcher(Any.ANY);
+        return null;
+    }
+
+    /**
      * Expects any Object argument. For details, see the EasyMock documentation.
      * To work well with generics, this matcher can be used in three different
      * ways. See {@link #anyObject()}.
Index: src/test/java/org/easymock/tests2/UsageConstraintsTest.java
===================================================================
--- src/test/java/org/easymock/tests2/UsageConstraintsTest.java	(revision 271)
+++ src/test/java/org/easymock/tests2/UsageConstraintsTest.java	(working copy)
@@ -391,7 +391,8 @@
         expect(mock.oneArg(anyLong())).andReturn("6");
         expect(mock.oneArg(anyShort())).andReturn("7");
         expect(mock.oneArg((String) anyObject())).andReturn("8");
-        expect(mock.oneArg(anyObject(String.class))).andReturn("9");
+        expect(mock.oneArg(anyString())).andReturn("10");
+        expect(mock.oneArg(anyObject(Object.class))).andReturn("9");
         expect(mock.oneArg((List<String>) EasyMock.<List<String>> anyObject())).andReturn("9"); // make sure there's no warning on the cast
         replay(mock);
         assertEquals("9", mock.oneArg(Collections.emptyList()));
@@ -401,10 +402,11 @@
         assertEquals("3", mock.oneArg((double) 1));
         assertEquals("7", mock.oneArg((short) 1));
         assertEquals("8", mock.oneArg("Test"));
+        assertEquals("10", mock.oneArg("Other Test"));
         assertEquals("4", mock.oneArg((float) 1));
         assertEquals("5", mock.oneArg((int) 1));
         assertEquals("6", mock.oneArg((long) 1));
-        assertEquals("9", mock.oneArg("Other Test"));
+        assertEquals("9", mock.oneArg(new Object()));
         verify(mock);
     }
 
